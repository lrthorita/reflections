What happens when you initialize a repository? Why do you need to do it?

    When you initialize a repository by "git init" command, you create a
    ".git" directory. Then, with "git status" command, you can see if
    the git was indeed initialized.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is a intermediate region between the working
    directory and the repository. When you have files on the working
    repository, not necessarelly they are tracked. When you add one or
    more files to the staging area by "git add" command, you turn them
    in tracked files, but still not commited. The committed files are
    in the repository. In summary, the working directory contains all
    the files (the untracked, the changed/tracked, and the commited files),
    the staging area contains all the files you want to add into the next
    commit, and the repository contains all the commited files.

How can you use the staging area to make sure you have one commit per logical
change?

    The staging area allows you to add (git add <file_name>) only the files
    that have been changed. It helps you to make sure that the new commit
    will only have a logical change (if you organize it at this way). If
    are not sure if the files you added have the changes you want, you can
    just use the "git diff --staged" command to verify the differences
    between the files on the staging area and the most recent commit. After
    ensuring the logical change, you can use "git commit" to create a new
    version/commit. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    If in a certain instance you want to try a new feature to your program,
    but you don't want it to interfere the on going project, you can create
    a new branch for this experiment. Or maybe if you want to try a new 
    version of your project (say it you want to make a program in another
    language), you can create a branch for this new version and design it
    in parallel with the master branch. This way, you can keep your history
    of your repository organized, in such a way that you can see in which
    commit you created a new branch, and see what is that branch about.

How do the diagrams help you visualize the branch structure?

    The diagrams can show you graphically how your branches and commits are
    organized. It makes easier to visualize the whole branch structure,
    allowing you to organize yourself and helping you not to create a new
    commit in the middle of a branch (it would make the new commit
    unreacheable).

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result of merging two branches together is a combined code of them.
    The merging command will get the modifications made by a branch and the
    others to add in a unique code. Sometimes, there will be some conflicts
    caused by similar modifications in both branches. If you get a conflict,
    you must open the merged code and verify where the modifications were made,
    compare and decide which one is better for your new commit. After
    modifying and saving the code, you must add to the staging area and
    make a new commit.
    We use to represent it in a diagram to make it easy to visualize where
    we made the merging of two or more branches. This way is easier to
    organize the structure of our repository and make decisions. Also, it
    helps you to visualize the parentage of each commit of each branch.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

    The Git's automatic merging is useful to combine two branches in just
    one command. This isn't time consumming, but sometimes it can't decide
    properly which modifications must be discarded or used. In this case,
    you will have to make the merges manually. On the other hand, always
    doing merges manually will allow you to always decide which modifications
    should be discarded or not. But, it will cost you more time, and it is
    not always necessary.
