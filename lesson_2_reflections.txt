What happens when you initialize a repository? Why do you need to do it?

    When you initialize a repository by "git init" command, you create a
    ".git" directory. Then, with "git status" command, you can see if
    the git was indeed initialized.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is a intermediate region between the working
    directory and the repository. When you have files on the working
    repository, not necessarelly they are tracked. When you add one or
    more files to the staging area by "git add" command, you turn them
    in tracked files, but still not commited. The committed files are
    in the repository. In summary, the working directory contains all
    the files (the untracked, the changed/tracked, and the commited files),
    the staging area contains all the files you want to add into the next
    commit, and the repository contains all the commited files.

How can you use the staging area to make sure you have one commit per logical
change?

    The staging area allows you to add (git add <file_name>) only the files
    that have been changed. It helps you to make sure that the new commit
    will only have a logical change (if you organize it at this way). If
    are not sure if the files you added have the changes you want, you can
    just use the "git diff --staged" command to verify the differences
    between the files on the staging area and the most recent commit. After
    ensuring the logical change, you can use "git commit" to create a new
    version/commit. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    If in a certain instance you want to try a new feature to your program,
    but you don't want it to interfere the on going project, you can create
    a new branch for this experiment. Or maybe if you want to try a new 
    version of your project (say it you want to make a program in another
    language), you can create a branch for this new version and design it
    in parallel with the master branch. This way, you can keep your history
    of your repository organized, in such a way that you can see in which
    commit you created a new branch, and see what is that branch about.

How do the diagrams help you visualize the branch structure?



What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?



What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?


