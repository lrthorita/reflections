How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The diff command helps to find the lines that were changed from the last 
    version. Maybe it is the cause of the bug introduced in the newest version.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Having easy access to the entire history of a file allows you to see the 
    changes that have been done untill now. In long term, it helps the programmer
    to see what have already been tested and what could be improved. Also, once
    you have a bug, it is easier to find what may be the responsible change for
    it, just by comparing the new version with the old version. 

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    When you want to try something on your code, but you do not want it to be
    in a new version of your project, it is more advantageous to create a commit
    manually. But, sometimes, when you are creating a new version of your project
    , and for some reason, your computer stop working, the automatic saving process
    is fundamental to not lose what you have done until the last moment.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because some systems are designed for controlling versions of codings, while
    others are designed to make documents (like reports). For codes, it is
    necessary to have a historic versions of the project, so that you can compare
    the new version with the old one. 

How can you use the commands git log and git diff to view the history of files?

    The git log command shows commit logs, which means you can see the history of
    changes on your project codes. With this command it will be shown the commits
    ID and the time (day and time) you changed each of them. Furthermore, you can
    see a brief description of what each commit is about (this descriptio was added
    previously when you have made the modification of your code).
    Once you know the history of commits, you can use the git diff commands to see
    the differences between two commits you are interested. This command will show
    lines you have added, deleted or changed.

How might using version control make you more confident to make changes that
could break something?

    As you have the previous version saved, you do not have to worry about bugs
    or breaks generated by a new command (or a new code line). If your newest
    version breaks, you have the previous version saved.
    Since you have all the history of your project commits, you can check out
    the old commits to find out what you have done to break your program. For
    this, you can use the "git checkout <commitID>" to run the old commit (given
    by its ID number, that can be found by using the "git log" command). The 
    checkout command will detach you from your current (most recent) commit, and
    atatch you to the commit you want to check. Doing so, you can run the old
    version program and check where you have introduced the bug on your project.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to try using the Git for projects development. First of all, I will
    try it on this file to verify the changes I have done by adding answers for
    the questions.
